from kafka import KafkaProducer
from backend.database import SessionLocal, Order
import json

producer = KafkaProducer(
    bootstrap_servers="localhost:9092",
    value_serializer=lambda v: json.dumps(v).encode("utf-8")
)

def send_order_event(order_id, customer="", address="", items=None, distance=None, weight=None, category="", status="Created"):
    """
    G·ª≠i ƒë∆°n h√†ng ho·∫∑c c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng l√™n Kafka.
    N·∫øu ch·ªâ truy·ªÅn order_id v√† status th√¨ t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ DB ƒë·ªÉ g·ª≠i ƒë·∫ßy ƒë·ªß.
    """
    order = {
        "order_id": order_id,
        "status": status
    }

    # N·∫øu ch·ªâ c√≥ order_id v√† status => L·∫•y d·ªØ li·ªáu t·ª´ DB
    if not (customer or address or items or distance or weight or category):
        db = SessionLocal()
        existing_order = db.query(Order).filter(Order.order_id == order_id).first()
        db.close()

        if existing_order:
            order["customer"] = existing_order.customer
            order["address"] = existing_order.address
            order["items"] = existing_order.items
            order["distance"] = getattr(existing_order, "distance", 0)
            order["weight"] = getattr(existing_order, "weight", 0)
            order["category"] = getattr(existing_order, "category", "Kh√¥ng x√°c ƒë·ªãnh")
    else:
        # Tr∆∞·ªùng h·ª£p t·∫°o ƒë∆°n m·ªõi ho·∫∑c c·∫≠p nh·∫≠t c√≥ ƒë·ªß th√¥ng tin
        if customer: order["customer"] = customer
        if address: order["address"] = address
        if items: order["items"] = items
        if distance is not None: order["distance"] = distance
        if weight is not None: order["weight"] = weight
        if category: order["category"] = category

    # Ki·ªÉm tra tr∆∞·ªõc khi g·ª≠i
    print(f"G·ª≠i d·ªØ li·ªáu v√†o Kafka: {order}")
    producer.send("orders", value=order)
    producer.flush()
    print(f"üì§ ƒê√£ g·ª≠i d·ªØ li·ªáu v√†o Kafka: {order}")

